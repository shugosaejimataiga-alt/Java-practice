今回は Java学習ロードマップ ステップ1－3「条件分岐」 → ネストされた条件分岐 を扱いますね。

📘 基本文法（例文コード）
まず「ネストされた条件分岐」とは、if文の中にさらにif文が入る構造のことです。
条件が複雑なときに使います。

例文

public class Main {
    public static void main(String[] args) {
        int age = 20;
        boolean hasID = true;

        if (age >= 18) {  // 外側の条件分岐
            if (hasID) {  // 内側の条件分岐（ネスト）
                System.out.println("入場できます");
            } else {
                System.out.println("身分証が必要です");
            }
        } else {
            System.out.println("18歳未満は入場できません");
        }
    }
}




📝 練習問題（あなたに解いていただくもの）
次の条件を満たすプログラムを書いてください：
int score という変数があります。

条件は次の通り：
score >= 80 なら → さらに判定：
score == 100 なら「満点です」
それ以外なら「合格です」
score < 80 なら「不合格です」

✅ あなたにお願いすること

上の条件をもとに Javaコードを書いてください。
（public class Main { ... } から書いていただけるとベストです）

public class Main {
  public static void main(String[] args) {
    int score =60;

    if (score >= 80){
      //80点以上ならさらに判定
      if (score == 100){
        System.out.println("満点です");
      }else{
        System.out.println("合格です");
      }
    }else{
      //80点未満
      System.out.println("不合格です");
    }
  }
}

👏 とても良いです！
コードは正しく書けていますし、要件をすべて満たしています。

✅ チェックポイント
if (score >= 80) の中に、さらに if (score == 100) を入れていて、しっかり ネストされた条件分岐 になっています。
else の位置も正しく、論理の流れに矛盾はありません。
変数 score = 60 の場合 → 「不合格です」と出力されます。

実行結果：

不合格です

💡 改善提案（より良くする書き方）
もし可読性を高めたい場合は、インデントやコメントをつけるとさらに分かりやすくなります。





「ネストされた条件分岐」は ifの中にifを書くことを理解できれば十分ですが、実務や試験でよく出るパターンがいくつかあります。
ここで追加で練習すると理解がより深まりますので、必要最低限の確認用に もう1問だけ 出してみましょう。

📝 練習問題（最終チェック）
次の条件を満たすプログラムを書いてください：

int age という変数があります。

条件は次の通り：
age >= 20 なら → さらに判定：
age >= 65 なら「高齢者です」
それ以外なら「成人です」
age < 20 なら → さらに判定：
age >= 13 なら「未成年（ティーン）です」
それ以外なら「子供です」

🎯 目標
この問題を正しく書ければ、ネストされた条件分岐の理解は完璧といえます。
やってみますか？

public class Main {
  public static void main (String[] args){
    int age =60;

    if (age >= 20){
      if(age >= 65){
        System.out.println("高齢者です");
      }else{
        System.out.println("成人です");
      }
    }else{
      if (age >= 13){
        System.out.println("子供です");
      }else{
      System.out.println("未成年（ティーン）です");
      }
    }
  }
}

❌ 間違いポイント

else(age < 20) はNG
→ else に条件は書けません。条件をつけたいときは else if (...) を使います。
ただし、今回はすでに「age >= 20」を判定しているので、残りは else だけで十分です。

System.out.pritnln → スペルミス
→ 正しくは System.out.println です。

System.out.println("未成年（ティーン）です"); の位置が外に出てしまっています。
→ このままだと、どの条件でも必ず最後に「未成年（ティーン）です」が出力されてしまいます。



✨ これで「ネストされた条件分岐」は完璧です！
次の範囲（繰り返し処理）に進んでもいいレベルに達しています。


あなた:
ネストされた条件分岐はこれだけですか？条件分岐でif文とswitch分を学んだのですが、複合はないのでしょうか？


ChatGPT:
とても良い質問です！✨
条件分岐を「if文」「switch文」「ネストされたif文」と学んできて、「他に組み合わせや複合はないのか？」という疑問ですね。整理してご説明します。

✅ Javaの条件分岐の全体像
Javaの条件分岐は、大きく分けてこの3つです：
if / else if / else
→ 条件式を柔軟に書ける。複数条件や範囲に強い。
switch文
→ 値が「完全一致」する場合に使うと読みやすい。
ネストされたif文
→ 条件の中に条件を重ねたいとき。

🔹「複合」の意味について
実は「複合条件」という形は存在します。それは 論理演算子（&&, ||, !）を組み合わせたif文 です。
これを学んだときの「論理演算子」がまさに「複合条件」にあたります。

例：複合条件

int age = 25;
boolean hasID = true;

if (age >= 20 && hasID) {
    System.out.println("入場できます");
} else {
    System.out.println("入場できません");
}


🔹 if と switch の組み合わせ？
これは直接的にはあまりしません。
なぜなら switchは「値の一致」専用で、範囲や複合条件を扱えないからです。
ただし、次のように 「if文で範囲を絞り、その中でswitchを使う」 という組み合わせはよくあります。

例：if と switch の複合利用

int age = 25;
String gender = "male";

if (age >= 20) {
    switch (gender) {
        case "male":
            System.out.println("成人男性です");
            break;
        case "female":
            System.out.println("成人女性です");
            break;
        default:
            System.out.println("成人です");
    }
} else {
    System.out.println("未成年です");
}

📝 まとめ
「if」「switch」「ネスト」が条件分岐の基本3つ。
複合条件は && や || を組み合わせた if文で実現する。
if と switch の組み合わせも可能（範囲チェック＋一致判定など）。
つまり、これで条件分岐に関してはほぼ学び切ったと言えます ✅