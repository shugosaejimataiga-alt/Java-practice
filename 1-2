📘 本日の学習テーマ
Javaの演算子
算術演算子（+, -, *, /, %）
代入演算子（=, +=, -=）
比較演算子（==, !=, >, <, >=, <=）
論理演算子（&&, ||, !）
インクリメント・デクリメント（++, --）


public class OperatorExample {
    public static void main(String[] args) {
        // 算術演算子
        int a = 10;
        int b = 3;
        System.out.println("a + b = " + (a + b)); // 足し算
        System.out.println("a - b = " + (a - b)); // 引き算
        System.out.println("a * b = " + (a * b)); // 掛け算
        System.out.println("a / b = " + (a / b)); // 割り算（整数同士なので小数切り捨て）
        System.out.println("a % b = " + (a % b)); // 余り

        // 代入演算子
        int x = 5;
        x += 3; // x = x + 3 と同じ
        System.out.println("x += 3 → " + x);
        x -= 2; // x = x - 2 と同じ
        System.out.println("x -= 2 → " + x);

        // 比較演算子
        System.out.println("a == b → " + (a == b)); // 等しいか
        System.out.println("a != b → " + (a != b)); // 等しくないか
        System.out.println("a > b  → " + (a > b));  // 大きいか
        System.out.println("a <= b → " + (a <= b)); // 以下か

        // 論理演算子
        boolean p = true;
        boolean q = false;
        System.out.println("p && q → " + (p && q)); // AND（両方trueならtrue）
        System.out.println("p || q → " + (p || q)); // OR（どちらかtrueならtrue）
        System.out.println("!p → " + (!p));         // NOT（trueをfalseに）

        // インクリメント・デクリメント
        int y = 7;
        System.out.println("y++ → " + (y++)); // 後置：使った後で +1
        System.out.println("y → " + y);
        System.out.println("++y → " + (++y)); // 前置：使う前に +1
        System.out.println("y-- → " + (y--)); // 後置：使った後で -1
        System.out.println("y → " + y);
    }
}


2️⃣ 練習問題（第1問）
📌 次のプログラムを完成させてください。

問題：変数 a に 15、変数 b に 4 を代入する
足し算・引き算・掛け算・割り算・余りを System.out.println で出力する

あなたがコードを書いたら、私が正誤チェックとフィードバックをします。
正解できたら次の問題（代入演算子）に進みます。

👉 では、第1問のコードを書いてみてください。

int a =15;
int b =4;
System.out.println(a + b, a - b, a : b, a / b, a % b);


❌ 間違っている点

System.out.println は引数を1つしか取れない
→ (a + b, a - b, …) のように「カンマ区切り」で複数値を一度に出力することはできません。
代わりに、複数行に分けて println を使うか、文字列連結（+）でつなぎます。

a : b は文法エラー
→ 「割り算」をしたい場合は a / b です。


int a =15;
int b =4;
System.out.println("a + b =" + a + b);
System.out.println("a - b =" + a - b);
System.out.println("a * b =" + a * b);
System.out.println("a / b =" + a / b);
System.out.println("a % b =" + a % b);

❌ 間違い・改善点

System.out.println("a + b =" + a + b);
→ これは "a + b =15" + 4 という「文字列連結」になってしまい、
計算結果「19」ではなく 「a + b =154」 と出力されます。
✅ 正しくは (a + b) をカッコで囲む必要があります。

System.out.println("a + b = " + (a + b));


System.out.println("a - b =" + a - b);
→ "a - b =" + a の結果は文字列で、さらに - b があるので「型の不一致」でコンパイルエラーになります。
✅ こちらも (a - b) をカッコで囲む必要があります。

System.out.println("a - b = " + (a - b));


System.out.println("a : b =" + a * b);
→ 「:」は演算子ではなく記号扱いになっていますが、ここでは掛け算しているのでコメントと違います。
✅ 掛け算なら「*」と表記しましょう。

System.out.println("a * b = " + (a * b));





int a =15;
int b =4;
System.out.println("a + b =" + (a + b));
System.out.println("a - b =" + (a - b));
System.out.println("a * b =" + (a * b));
System.out.println("a / b =" + (a / b));
System.out.println("a % b =" + (a % b));

完璧です！🎉👏
しっかり ( ) を使って計算部分をまとめられており、文法も正しいです。

このコードを実行すると出力は次の通りになります：

👉 これで *算術演算子（+, -, , /, %） の基礎はクリアです！





✅ 次のステップ（代入演算子）

代入演算子は、変数に新しい値を入れるときに便利です。
=, +=, -= などがあります。

int x = 10;
System.out.println("初期値 x = " + x);

x += 5; // x = x + 5
System.out.println("x += 5 → " + x);

x -= 3; // x = x - 3
System.out.println("x -= 3 → " + x);

x *= 2; // x = x * 2
System.out.println("x *= 2 → " + x);

x /= 4; // x = x / 4
System.out.println("x /= 4 → " + x);

x %= 3; // x = x % 3
System.out.println("x %= 3 → " + x);



📘 練習問題（第2問）
次のプログラムを書いてください：変数 x に 20 を代入する
x に対して以下の操作を順番に行い、結果を出力する

int x =20;

x += 10;
System.out.println("x += 10 →" + x);
x -= 5;
System.out.println("x -= 5 →" + x);
x *= 2;
System.out.println("x *= 2 →" + x);
x /= 5;
System.out.println("x /= 5 →" + x);
👉 では、コードを書いてみてください！


「日本語の説明文」をそのまま書いている部分

x に対して以下の操作を順番に行い、結果を出力する
→ これはコメントにする必要があります。Javaでは // または /* */ を使います。

各行の末尾にセミコロン (;) が必要
Javaでは文の終わりは必ず ; で区切ります。








すみません。
public class AssignmentExample {
    public static void main(String[] args) {
これらは書くべきなんですか？これら自体よくわからないのですが



ChatGPT:良い質問です！🌟
ここは「Javaの基本構造」の部分なので、なぜ必要なのかをしっかり理解しておいた方がいいです。

📝 1. public class AssignmentExample

クラス宣言 です。
Javaは「クラス」という単位でプログラムを管理します。
AssignmentExample はクラスの名前（自由に決められる）。
1つのJavaファイルには必ず「クラス」が必要です。

👉 例：

public class MyProgram {
    // 中にメソッド（処理のまとまり）が書かれる
}




📝 2. public static void main(String[] args)

プログラムの入り口（エントリーポイント） です。
Javaでは、プログラムを実行するときに必ずこの main メソッドから処理が始まります。

🔹 分解すると：
public : どこからでも呼び出せる
static : インスタンスを作らずに実行できる
void : 戻り値がない（結果を返さない）
main : 特別な名前で、ここからプログラムがスタートする
(String[] args) : コマンドライン引数を受け取れる（今は気にしなくてOK）

👉 例：

public static void main(String[] args) {
    System.out.println("Hello, Java!");
}



📝 3. じゃあ 必ず書かなきゃいけないの？

はい、書く必要があります。
Javaは「mainメソッドがないと実行できない」言語です。
ただし、学習の便宜上「クラスとmain部分はテンプレートのように使う」と考えると良いです。

実際、Javaのコードは大体こういう形で始まります👇

public class Main {
    public static void main(String[] args) {
        // ここに練習コードを書く
    }
}

✅ まとめ
public class ... → 「プログラムの枠組み」
public static void main(String[] args) → 「スタート地点」

これがないとJavaのコードは動かない

👉 もし「毎回書くの面倒だな」と思ったら、学習用に 固定テンプレート を用意しておくと楽です。

例えば：

public class Main {
    public static void main(String[] args) {
        // ここにコードを書く！
    }
}



static : インスタンスを作らずに実行できるとは何か。

✅ インスタンスとは
クラス（設計図）から実際に作られた「実体（オブジェクト）」のことです。

例え
クラス = 設計図（家の設計図）
インスタンス = 設計図をもとに建てられた家（実物）


🚗 車の例えで考えましょう
クラス = 車の設計図
インスタンス = 実際に作った車（トヨタ車1台、ホンダ車1台など）

① 普通の変数・メソッド（staticなし）
これは「車ごとに違う情報」です。
例：色・ナンバー・燃料残量など。
車を作らないと存在しません。
👉 インスタンス（車）を作ってから使います。

class Car {
    String color;

    void drive() {
        System.out.println(color + "の車が走る！");
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car();   // ← 車を作る（インスタンス化）
        myCar.color = "赤";
        myCar.drive();           // → 赤の車が走る！
    }
}

② static 変数・メソッド
これは「車全体に共通する情報」です。
例：メーカーのロゴ、製造した会社名など。
車を作らなくても（インスタンスを作らなくても）存在します。

class Car {
    static String maker = "トヨタ"; // 全ての車に共通の情報

    static void showMaker() {
        System.out.println("メーカーは " + maker + " です");
    }
}

public class Main {
    public static void main(String[] args) {
        Car.showMaker(); // 車を作らなくても使える
        // → メーカーは トヨタ です
    }
}

✅ 超端的にまとめると
staticなし → 個別の物に属する（インスタンスを作ってから使う）
staticあり → 全員で共有する（インスタンスなしで使える）

💡 ポイント
「static は “共通のもの”」と覚えると理解が早いです。




📘 比較演算子とは
2つの値を比べて、真（true）か 偽（false）か を返す演算子です。

== : 等しい
!= : 等しくない
> : より大きい
< : より小さい
>= : 以上
<= : 以下

✅ 例文コード

public class ComparisonExample {
    public static void main(String[] args) {
        int a = 10;
        int b = 20;

        System.out.println("a == b → " + (a == b)); // false
        System.out.println("a != b → " + (a != b)); // true
        System.out.println("a > b  → " + (a > b));  // false
        System.out.println("a < b  → " + (a < b));  // true
        System.out.println("a >= b → " + (a >= b)); // false
        System.out.println("a <= b → " + (a <= b)); // true
    }
}


📘 練習問題（第3問）
次の条件でコードを書いてください👇
変数 x = 8、変数 y = 12 を宣言する
次の比較を System.out.println で出力する

x == y

x != y

x < y

x >= y

👉 では、コードを書いてみてください！

int x =8;
int y =12;
System.out.println(x == y);
System.out.println(x != y);
System.out.println(x < y);
System.out.println(x >= y);

完璧です！💯👏

書き方は全て正しく、比較演算子の基本が使えています。





📘 論理演算子とは

比較結果や条件を 組み合わせたり反転したり するための演算子です。
結果は必ず true または false になります。
&&（AND） : 両方が true のときだけ true
||（OR） : どちらかが true なら true
!（NOT） : true を false に、false を true に反転する

✅ 例文コード
public class LogicalExample {
    public static void main(String[] args) {
        int a = 5;
        int b = 10;

        System.out.println((a > 0) && (b > 0)); // true && true → true
        System.out.println((a > 0) && (b < 0)); // true && false → false

        System.out.println((a > 0) || (b < 0)); // true || false → true
        System.out.println((a < 0) || (b < 0)); // false || false → false

        System.out.println(!(a > 0));           // !(true) → false
        System.out.println(!(a < 0));           // !(false) → true
    }
}


📘 練習問題（第4問）
次のコードを書いてください👇
変数 x = 7、y = -3 を宣言する
以下の論理式を System.out.println で出力する

x > 0 && y > 0

x > 0 || y > 0

!(x < 0)

👉 では、コードを書いてみてください！

int x = 7;
int y = -3;

System.out.println(x > 0 && y > 0); // 両方正の数か？
System.out.println(x > 0 || y > 0); // どちらか正の数か？
System.out.println(!(x < 0));       // xが負でないか？






📘 インクリメント・デクリメントとは
数値を 1ずつ増やしたり減らしたりする演算子 です。
++ : 1を加える（インクリメント）
-- : 1を減らす（デクリメント）
さらに、位置によって意味が少し違います👇
x++ : 後置インクリメント → 使った後に +1
++x : 前置インクリメント → 使う前に +1
x-- : 後置デクリメント → 使った後に -1
--x : 前置デクリメント → 使う前に -1

✅ 例文コード
public class IncrementDecrementExample {
    public static void main(String[] args) {
        int n = 5;

        System.out.println("n   = " + n);    // 5
        System.out.println("n++ = " + (n++)); // 5（使った後で +1）
        System.out.println("n   = " + n);    // 6
        System.out.println("++n = " + (++n)); // 7（使う前に +1）

        System.out.println("n-- = " + (n--)); // 7（使った後で -1）
        System.out.println("n   = " + n);    // 6
        System.out.println("--n = " + (--n)); // 5（使う前に -1）
    }
}

📘 練習問題（第5問）

次のコードを書いてください👇

変数 x = 10 を宣言する

以下を順番に出力する

int x =10;
System.out.println(x++);

System.out.println(x);

System.out.println(++x);

System.out.println(x--);

System.out.println(x);

👉 では、コードを書いてみてください！



🎉 まとめ
これで 演算子（算術・代入・比較・論理・インクリメント/デクリメント） の学習はひと通りクリアです！

算術演算子：計算

代入演算子：変数に再代入

比較演算子：true/falseの判定

論理演算子：条件の組み合わせ

インクリメント/デクリメント：1ずつ増減