今回の範囲「ステップ1－7：メソッド（オーバーロード）」を進めていきましょう。
指示通りに、まずは 基本の書き方（例文コード） を提示します。

📘 基本文法：メソッドのオーバーロード

Javaでは、同じ名前のメソッドでも、引数の型や数が異なれば定義できる ことを「オーバーロード」と呼びます。
（※戻り値の型だけ違うのはオーバーロードになりません）

例文コード
public class Main {

    整数2つを足すメソッド
    public static int add(int a, int b) {
        return a + b;
    }

    小数2つを足すメソッド（オーバーロード）
    public static double add(double a, double b) {
        return a + b;
    }

    整数3つを足すメソッド（オーバーロード）
    public static int add(int a, int b, int c) {
        return a + b + c;
    }

    public static void main(String[] args) {
        
        呼び出しの例
        int result1 = add(5, 10);        int型を渡すので 5 + 10
        double result2 = add(2.5, 3.8);  double型を渡すので 2.5 + 3.8
        int result3 = add(1, 2, 3);      引数3つなので 1 + 2 + 3

        System.out.println("整数2つの加算結果: " + result1);
        System.out.println("小数2つの加算結果: " + result2);
        System.out.println("整数3つの加算結果: " + result3);
    }
}

✅ 解説
add(int a, int b) → 整数を2つ足す
add(double a, double b) → 小数を2つ足す
add(int a, int b, int c) → 整数を3つ足す
→ 同じ名前 add でも引数が違えば区別できる
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

次のステップ
この例文を踏まえて、まず練習問題を出します。

練習問題①
📌 以下の仕様で オーバーロードされたメソッド multiply を作ってください。
整数2つを掛け算するメソッド
小数2つを掛け算するメソッド
整数3つを掛け算するメソッド
メインメソッドでそれぞれ呼び出し、結果を表示してください。

👉 まずはこの問題に挑戦してみてください！

public class Main {
  public static int add (int a, int b){
    return a * b;
  }

  public static double add (double a, double b){
    return a * b;
  }

  public static int add (int a, int b, int c){
    return a * b * c;
  }

  public static void main (String[] args){
    int result1 = add(5, 3);
    double result2 = add(5.1, 6.2);
    int result3 = add(1, 2, 3);
  }
  System.out.println(result1);
  System.out.println(result2);
  System.out.println(result3);
}

❌ エラー箇所
  }
  System.out.println(result1);
  System.out.println(result2);
  System.out.println(result3);
}
👉 System.out.println が main メソッドの外に出てしまっています。
Javaでは すべての処理はメソッドの中 に書かなければいけません。

メソッド名の意味と中身の不一致
課題でお願いしたのは multiply（掛け算） をオーバーロードすることでした。
しかしコードでは、メソッド名が add（足すの意）なのに、中身は掛け算になっています。
ーーーーーーーーーーーーー

問題1の修正版：
public class Main {
  public static int multiplication (int a, int b){
    return a * b;
  }

  public static double multiplication (double a, double b){
    return a * b;
  }

  public static int multiplication (int a, int b, int c){
    return a * b * c;
  }

  public static void main (String[] args){
    int result1 = multiplication(5, 3);
    double result2 = multiplication(5.1, 6.2);
    int result3 = multiplication(1, 2, 3);

  System.out.println(result1);
  System.out.println(result2);
  System.out.println(result3);
  }
}
✅ 実行結果（予想）
15
31.62
6

multiplication(int, int) → 5 × 3 = 15
multiplication(double, double) → 5.1 × 6.2 = 31.62
multiplication(int, int, int) → 1 × 2 × 3 = 6

💡 フィードバック
「オーバーロード」の基本がしっかり理解できています。
同じ名前でも、引数の型・個数が違えば複数定義できることを実感できたはずです。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

📘 応用問題：printInfo のオーバーロード
📌 課題内容
printInfo という名前のメソッドを オーバーロード してください。
引数が String 型のとき → 「渡された文字列」を表示する
引数が String 型と int 型のとき → 「文字列を指定された回数だけ表示する」
引数が int 型のとき → 「その数値が偶数か奇数かを表示する」

✅ 出力例（実行イメージ）
Hello
Hello
Hello
7 は奇数です

👉 まずはこの課題に挑戦してみてください！

public class Main {
  public static void printInfo (String string){
    System.out.println(string);
  }

  public static void printInfo (){

  }

  public static void printInfo (int number){
    if (number % 2 == 0){
      System.out.println("偶数です。");
    }else {
      System.out.println("奇数です。");
    }
  }

  public static void main (String[] args){
    string result1 = printInfo(); 
    
    int result3 = printInfo(5);

    System.out.println(result1);
    System.out.println
    System.out.println(result3);
  }
}
❌ 問題点と修正ポイント

「引数なし」の printInfo() は不要
　課題では「引数が String と int のとき」を求めているので、空メソッドは使いません。

戻り値を使わない（void のままでOK）
　あなたのコードでは printInfo() の呼び出し結果を result1 や result3 に代入しようとしていますが、戻り値が void なので代入できません。
👉 つまり、System.out.println() は printInfo メソッドの中で直接行うべきです。

「文字列を指定回数表示する」メソッドが未実装
　例：printInfo("Hello", 3) →
　 　Hello 　Hello 　Hello 　
　となるように for文 を使います。

ーーーーーーーーーーーーーー

問題2修正版：

public class Main {
  public static void printInfo (String string){
    System.out.println(string);
  }

  public static void printInfo (String string, int count){
    for (int i =0; i < count; i++){
      System.out.println(string);
    }
  }

  public static void printInfo (int number){
    if (number % 2 == 0){
      System.out.println("偶数です。");
    }else {
      System.out.println("奇数です。");
    }
  }

  public static void main (String[] args){
    printInfo("こんにちは");
    printInfo("すごい", 6);
    printInfo(2);
  }
}
✅ チェックポイント

オーバーロードの定義
printInfo(String) → 文字列を1回表示
printInfo(String, int) → 指定回数文字列を表示
printInfo(int) → 偶数か奇数かを判定
→ すべて要件通り実装できています。

実行結果（イメージ）

こんにちは
すごい
すごい
すごい
すごい
すごい
すごい
偶数です。

余計な戻り値の代入なし
void を正しく扱えていて、呼び出し側もOK。

💡 フィードバック
for 文も正しく書けています。
引数の型と個数でメソッドを切り替える「オーバーロード」の理解がしっかりできています。
このレベルなら 最終テスト（オーバーロードの集大成問題） に進む準備は十分です。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

📘 最終テスト問題：図形の面積を求めるメソッドのオーバーロード
📌 課題内容

calculateArea という名前のメソッドをオーバーロードしてください。

引数が int のとき
　→ 正方形の一辺の長さを受け取り、面積を計算して表示
　（例：5 → 25）

引数が int と int のとき
　→ 長方形の縦と横を受け取り、面積を計算して表示
　（例：3, 4 → 12）

引数が double のとき
　→ 半径を受け取り、円の面積を計算して表示
　（円周率は 3.14 とする）

✅ 実行例（期待される出力イメージ）
正方形の面積: 25
長方形の面積: 12
円の面積: 78.5


👉 ポイントは「同じ名前のメソッドを3種類作る」ことです。
public class Main {
  public static int calculateArea (int a){
    return a * a;
  }
  public static int calculateArea (int a, int b){
    return a * b;
  }
  public static double calculateArea (double a){
    return a * a * 3.14;
  }

  public static void main (String[] args){
    int result1 = calculateArea(3);
    int result2 = calculateArea(3, 4);
    double result3 = calculateArea(3.0);

    System.out.println("正方形の面積:" + result1);
    System.out.println("長方形の面積:" + result2);
    System.out.println("円の面積:" + result3);
  }
}
完璧です！🎉
最終テスト問題も正しく解けていますね。

✅ チェックポイント
オーバーロードの実装
calculateArea(int a) → 正方形
calculateArea(int a, int b) → 長方形
calculateArea(double a) → 円
→ 要件通り3種類定義できています。

mainメソッドの呼び出し
calculateArea(3) → 9
calculateArea(3, 4) → 12
calculateArea(3.0) → 28.26
→ 正しく計算されています。

出力結果（イメージ）

正方形の面積:9
長方形の面積:12
円の面積:28.26

💡 フィードバック
戻り値の型を int と double に分けている点もGood！
void にして直接 println する方法もありますが、
　今回のように「戻り値を返して main で出力する」方法は、実務に近い書き方 です。
オーバーロードの理解は十分にできています。🎯

✅ この範囲のまとめ
同じ名前のメソッドでも 引数の型や数が違えば複数定義できる（オーバーロード）。
int / double / 引数の個数の違いなどで切り替え可能。
実務でも 使いやすいAPI設計 のためによく活用される。

👉 これで 「メソッド（オーバーロード）」の範囲は合格 です！🎓✨