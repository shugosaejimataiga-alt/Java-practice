今回の範囲は 「クラスとオブジェクト：newによるインスタンス生成」 ですね。ではテンプレート通りに進めます。

① 基本の書き方（例文コード）

クラスの定義
class Dog {
    String name;
    int age;

    void bark() {
        System.out.println(name + " がワンワン！と吠えました。");
    }
}

実行クラス
public class Main {
    public static void main(String[] args) {
        
        new によるインスタンス生成
        Dog dog1 = new Dog();   Dogクラスのインスタンスを生成
        dog1.name = "ポチ";      フィールドに値を代入
        dog1.age = 3;
        dog1.bark();            メソッド呼び出し

        Dog dog2 = new Dog();   もう一つ別のインスタンスを生成
        dog2.name = "タロウ";
        dog2.age = 5;
        dog2.bark();
    }
}

💡 解説
new Dog() でメモリ上に Dogオブジェクトを生成します。
dog1 や dog2 は「変数」ではなく、生成したオブジェクトを指す 参照変数 です。
それぞれのインスタンスは独立しており、dog1.name と dog2.name は別々に管理されます。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
疑問：
すみません。問題の前に、1個前の範囲の問題と、今回の範囲の問題の違いについておしえてください。なんか頭がごちゃごちゃになってきました。

ChatGPT:
良い質問です😊
混乱しやすいポイントなので、前の範囲と今回の範囲の違いを整理してみますね。

1つ前の範囲（クラスとオブジェクト：フィールド・メソッド）
目的：クラスの中に「変数（フィールド）」や「処理（メソッド）」を書けるようになること。
コードのイメージ：

class Calculator {
    int add(int a, int b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        Calculator calc = new Calculator(); インスタンス生成（ここはちょっと出てきた）
        int result = calc.add(3, 5);
        System.out.println(result);
    }
}

この時点では「クラスに変数やメソッドを定義できる」ということを学びました。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
今回の範囲（newによるインスタンス生成）
目的：実際に new を使って「オブジェクトを生み出す」仕組みを理解すること。
ポイント：
new クラス名() で オブジェクトがメモリ上に作られる。
変数 = new クラス名(); でそのオブジェクトを操作するための 参照変数 を持つ。
同じクラスから何個でも別々のオブジェクトを作れる（独立して存在）。
コードのイメージ：

Dog dog1 = new Dog(); 1匹目を生成
Dog dog2 = new Dog(); 2匹目を生成

違いを一言でいうと
前回：クラスの「設計図の中身」を理解した（フィールドやメソッドを定義できる）。
今回：その設計図を使って 実際にオブジェクトを作る（=newでインスタンス生成） ことを学ぶ。

つまり、前回は「設計図を書けるようになる」こと、
今回は「設計図から実際にモノを作れるようになる」ことです。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
疑問:
実際にオブジェクトを作る（=newでインスタンス生成）これって前回もやりませんでした？インスタンス実際に作っていますよね？

ChatGPT:
おっしゃる通りです！👏
前回の範囲でも インスタンス生成（new クラス名()） 自体は出てきました。
ただし——ここが大事なポイントです👇
前回（フィールド・メソッド編）
主役は 「クラスの中身（設計図）」 でした。
フィールド（変数）やメソッド（処理）をどう書くかを学ぶのが中心。
new は「その設計図を試すためにちょっと使った」程度。

例：Calculator calc = new Calculator(); はあくまでメソッドを呼ぶための準備。

今回（newによるインスタンス生成編）
主役は 「newによってオブジェクトがどう生まれるか」。
例えば：
Dog dog1 = new Dog();
Dog dog2 = new Dog();
同じクラスから別々の実体を複数作れること

それぞれのインスタンスが独立して値を持てること
（dog1.name と dog2.name が違う値になる）

まとめると
前回は「設計図を書けるようになる」＋「お試しで1つ作った」
今回は「new で作ったオブジェクトが独立して存在する」ことをしっかり理解する

👉 例えると：
前回：家の設計図（間取りやドアの位置）を描く練習
今回：設計図から「1軒目の家」「2軒目の家」を実際に建てて、別々に存在することを体験する

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

② 練習問題（あなたに解いてもらう）

問題1：
Car クラスを作成してください。
フィールド：String model、int year
メソッド：void drive() → 「◯◯(model) が走っています！」と出力
Main クラスの main メソッドで以下を行う：
Car クラスのインスタンスを2つ作成
それぞれに違う model と year を代入
2つのインスタンスの drive() を呼び出す

まずはこの 問題1のコード を書いてみてください。
あなたのコードを見て、私が正誤チェックとフィードバックをします。

class Car {
  String model;
  int year;

  void drive(){
    System.out.println(model + "製品が走っています！")
  }
}

public class Main {
  public static void main (String[] args){
    Car car1 = new Car();
    car1.model = "Honda";
    car1.year = 6;
    car1.drive();

    Car car2 = new Car();
    car2.name = "Toyota";
    car2.year = 9;
    car2.drive();
  }
}

コード書いてくださってありがとうございます！🎉
さっそく確認しましたが、いくつか修正ポイントがあります👇

❌ エラーになる部分

・セミコロン抜け
System.out.println(model + "製品が走っています！")
→ 文の終わりに ; が必要です。


・フィールド名の間違い
Car クラスには model と year しか定義していません。
ところが car2.name = "Toyota"; と書いていて、name というフィールドは存在しないためエラーになります。
→ 正しくは car2.model = "Toyota"; です。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

練習問題修正版：

class Car {
  String model;
  int year;

  void drive(){
    System.out.println(model + "製品が走っています！");
  }
}

public class Main {
  public static void main (String[] args){
    Car car1 = new Car();
    car1.model = "Honda";
    car1.year = 6;
    car1.drive();

    Car car2 = new Car();
    car2.model = "Toyota";
    car2.year = 9;
    car2.drive();
  }
}

完璧です！👏
前回の修正点（; の付け忘れ、name → model）も直っていて、正しく動作するコードになっています。

実行結果（イメージ）
Honda製品が走っています！
Toyota製品が走っています！

フィードバック
Car car1 = new Car(); と Car car2 = new Car(); で 2つのインスタンスを生成できています。
car1 と car2 はそれぞれ独立して model と year の値を持っています。

メソッド drive() を呼び出すと、car1 は Honda、car2 は Toyota として出力されていて、今回の「newによるインスタンス生成」の目的をクリアできています。

👉 この問題は 合格 です🎉