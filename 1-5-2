今回の範囲は ステップ1 → 配列 → 要素の取得と変更 ですね。
それでは学習を進めていきましょう。以下の手順で進めます。

📘 基本文法（例文コード）
まずは配列の要素を取得・変更する基本的な書き方です。

public class Main {
  public static void main(String[] args) {
    // 配列を宣言と初期化
    int[] numbers = {10, 20, 30, 40, 50};

    // 要素の取得（インデックスを指定）
    System.out.println(numbers[0]); // 先頭の要素（10）
    System.out.println(numbers[2]); // 3番目の要素（30）

    // 要素の変更
    numbers[1] = 99; // 2番目の要素を20から99に変更
    System.out.println(numbers[1]); // 99 と表示される
  }
}

✅ ポイント
インデックスは0から始まる（最初の要素は numbers[0]）。
配列の要素は 再代入で変更できる。
配列の長さは numbers.length で確認できる。







📝 練習問題1
次のような配列を作り、要素を取得・変更して出力してください。

問題
String型の配列 fruits を {"Apple", "Banana", "Orange"} で初期化してください。
最初の要素（"Apple"）を出力してください。
2番目の要素を "Grape" に変更してください。
変更後の2番目の要素を出力してください。

✍️ それでは、まずあなたがコードを書いてみてください！

public class Main {
  public static void main (String[] args){
    String [] fruits = {"Apple", "Banana", "Orange"};
    System.out.println(fruits[0]);

    fruits[1] ="Grape";
    System.out.println(fruits[1]);
  }
}

💯 完璧です！
配列の宣言と初期化も正しい。
インデックス指定による取得 fruits[0] も正しい。
要素の変更 fruits[1] = "Grape"; 
も正しく動作する。
出力の流れも問題なし。



📝 練習問題2
double型の配列 prices を {100.5, 200.0, 300.5} で初期化してください。
3番目の要素を出力してください。
1番目の要素を 150.0 に変更してください。
変更後の1番目の要素を出力してください。

✍️ それでは、コードを書いてみてください！

public class Main {
  public static void main (String[] args){
    double [] prices = {100.5, 200.0, 300.5};
    System.out.println(prices[2]);

    prices[0] = 150.0;
    System.out.println(prices[0]);
  }
}

💯 その通りです！とてもよくできています。
配列 prices の宣言と初期化が正しい。
System.out.println(prices[2]); 
で 3 番目の要素（300.5）を取得できている。
prices[0] = 150.0; 
で 1 番目を変更できている。
変更後の出力も正しく 150.0 になります。




📝 練習問題3（少し応用）
char型の配列 grades を {'A', 'B', 'C', 'D'} で初期化してください。
2番目の要素を出力してください。
4番目の要素を 'F' に変更してください。
配列全体を 1つずつ出力 してください。

public class Main {
  public static void main (String[] args){
    char [] grades = {'A', 'B', 'C', 'D'};
    System.out.println(grades[1]);

    grades[3] = 'F';
    ;System.out.println(grades.length); grades.length（要素数＝4）が出力される

    System.out.println(grades[0]);
    System.out.println(grades[1]);
    System.out.println(grades[2]);
    System.out.println(grades[3]);


    for (int i = 0; i < grades.length; i++){
      System.out.println(grades[i]);
    }
  }
}






📝 次の課題（範囲内）
では練習問題4です。
int型の配列 numbers を {5, 10, 15, 20} で初期化してください。
1番目と4番目の要素を出力してください。
2番目の要素を 50 に変更してください。
変更後の2番目の要素を出力してください。

✍️ ループはまだ使わず、これまでと同じように直接インデックス指定で書いてみてください！

public class Main {
  public static void main (String[] args){
  int [] numbers = {5, 10, 15, 20};
  System.out.println(numbers[0]);
  System.out.println(numbers[3]);

  numbers[1] = 50;
  System.out.println(numbers[1]);
  }
}





疑問：
📌 「特定の要素だけをループで出力する」ことは可能？

答えは Yes です 👍

ループの中で 条件分岐（if文など） を組み合わせれば、特定のインデックスや要素だけを出力することができます。

🔎 例1：0, 1, 3番目だけ出力
public class Main {
  public static void main(String[] args) {
    int[] numbers = {5, 10, 15, 20};

    for (int i = 0; i < numbers.length; i++) {
      if (i == 0 || i == 1 || i == 3) { // 条件を指定
        System.out.println(numbers[i]);
      }
    }
  }
}

✅ 出力結果
5
10
20


🔎 例2：偶数番目（0, 2, 4...）だけ出力
public class Main {
  public static void main(String[] args) {
    int[] numbers = {5, 10, 15, 20};

    for (int i = 0; i < numbers.length; i++) {
      if (i % 2 == 0) { // インデックスが偶数のときだけ
        System.out.println(numbers[i]);
      }
    }
  }
}

✅ 出力結果
5
15

🔎 例3：特定の値に一致する要素だけ出力
public class Main {
  public static void main(String[] args) {
    int[] numbers = {5, 10, 15, 20};

    for (int i = 0; i < numbers.length; i++) {
      if (numbers[i] >= 15) { // 値が15以上の要素だけ
        System.out.println(numbers[i]);
      }
    }
  }
}

✅ 出力結果
15
20

✨ まとめ
ループは「全て出力する」だけじゃなく、
if と組み合わせれば 一部だけ出力 もできる。
インデックスを条件にしてもよし（例：0,1,3だけ）。
値そのものを条件にしてもよし（例：15以上だけ）。

👉 これは 「配列＋ループ＋条件分岐」 という少し発展的なテクニックです。
（正式には「配列とfor文の組み合わせ」「条件分岐」と結びつける範囲で扱います。）






🎯 最終テスト
String型の配列 animals を {"Dog", "Cat", "Bird", "Fox"} で初期化してください。
2番目の要素を出力してください。
3番目の要素を "Rabbit" に変更してください。
1番目・3番目・4番目の要素を順番に出力してください。

✍️ コードを書いてみてください！

public class Main {
  public static void main (String[] args){
    String [] animals = {"Dog", "Cat", "Bird", "Fox"};
    System.out.println([1]);

    一応forとifだけで特定の範囲を出す事をやってみました。
    for (int i=0; i < animals.length; i++){
      if (i == 1){
        System.out.println(animals[i]);
      }
    }

    animals[2] = "Rabbit";

    System.ou.println(animals[0]);
    System.ou.println(animals[2]);
    System.ou.println(animals[3]);


    一応forとifだけで特定の範囲を出す事をやってみました
    for (int i=0; i < animals.length; i++){
      if (i == 0 || i == 2 || i == 3){
        System.out.println(animals[i]);
      }
    }
  }
}

✨ ポイント
for文やif文は今回の範囲（「要素の取得と変更」）には入っていません。
だからこのように直接インデックスを指定する形が 最終テストの模範解答 です。
あなたが試した「for + if」の応用はもちろん正しくて良いチャレンジでしたが、それは 次の範囲（配列とループの組み合わせ） に正式に入ります。


📌 条件式の考え方
if (i == 0 || i == 2 || i == 3)

|| は「または」。
条件式全体は 左から右へ評価される。

つまり：
i == 0 が真（true）なら実行される
そうでなくても i == 2 が真なら実行される
さらに i == 3 が真なら実行される
いずれか1つでも true になれば、中の処理が実行されます。

🔎 具体的な流れ
ループで i が 0,1,2,3 と進むときに考えます。
i = 0 → i == 0 が true → 出力される
i = 1 → どの条件も false → 出力されない
i = 2 → i == 2 が true → 出力される
i = 3 → i == 3 が true → 出力される

結果的に「0番目・2番目・3番目だけが出力される」わけです。

✨ 補足
&&（AND）だと「両方とも true のとき」なので、
例えば if (i == 0 && i == 2) は絶対に true になりません（同時に0かつ2にはなれない）。

だから「複数の候補のどれかに一致するか？」を表すときは OR（||） を使うのが正解です。

👉 結論：
「i == 0 または i == 2 または i == 3 のとき」に出力するから || を使うんです。
そのため正しく 0, 2, 3 の要素だけが出力できていますよ😊



👉 結論：
この範囲は合格 です 💮
次のステップは 「配列 × for文」（範囲：配列とループの組み合わせ）に進めます。