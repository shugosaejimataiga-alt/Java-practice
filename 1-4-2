今回は ステップ1：基礎文法マスター → 4. 繰り返し処理 → while文 の学習ですね。
私は「先生」として進めますので、基本の書き方から始めましょう。

📘 while文の基本構文

Javaの while 文は、条件が true の間、処理を繰り返す 仕組みです。

public class Main {
  public static void main(String[] args) {
    int i = 1; // 変数の初期化

    while (i <= 5) {  // 条件式（iが5以下の間繰り返す）
      System.out.println(i);
      i++;  // 変数を更新しないと無限ループになる
    }
  }
}

実行結果
1
2
3
4
5


🔍 ポイント解説
初期化
ループで使う変数（ここでは i）を最初に設定します。

条件式
while (条件式) が true の間だけ 繰り返します。

更新
ループの中で i++ のように変数を更新しないと、条件が永遠に true となり「無限ループ」になります。




📝 練習問題（問題1）
while 文を使って、1から10までの偶数 を表示してください。
（例）
2
4
6
8
10

👉 あなたがコードを書いてみてください。その後に私が正誤をチェックして、フィードバックをお返しします。

public class Main{
  public static void main (String[] args) {
    int i =1;

    while (i <=10){
    if (i %2 == 0){
      System.out.println(i);
      }i++;
    }
  }
}

❌ 修正ポイント

while の条件式の後ろにセミコロン ; は不要

while (i <= 10) { ... }


if文の条件式が未完成
偶数かどうかを判定するには i % 2 == 0 が必要です。

無限ループになる
i の更新（i++）がないため、条件が変わらずループが終わりません。

i++ の後ろにセミコロン ; を忘れています。
Javaでは文の終わりには必ず ; が必要です。



完璧です！👏
セミコロンの修正も入っていて、コードは正しく動作します。
実行すると、しっかり「1から10までの偶数」が表示されますね。

🖥 実行結果
2
4
6
8
10

💡フィードバック
if (i % 2 == 0) の条件式も正しく書けています。
i++ の位置も正しく、無限ループにならず正常に終了します。
コードの書き方も読みやすくてGoodです！

✅ この問題は 合格 です。

では、次の課題に進みましょう！
📝 問題2
while 文を使って、10から1まで逆順に表示してください。

（出力例）
10
9
8
7
6
5
4
3
2
1

👉 ぜひコードを書いてみてください。

public class Main{
  public static void main (String[]args){
    int i =10;

    while(i >= 1){
      System.out.println(i);
      i--;
    }
  }
}

とても惜しいです！👏
実行イメージは正しいのですが、i-- の位置が間違っているために 無限ループ になります。

❌ 問題点
while(i >= 1){
  System.out.println(i);
}
i--; // ← この位置だと while の外！一度も減らない
この書き方だと i が 10のまま変わらず、条件 i >= 1 がずっと true になって無限ループします。




素晴らしいです！✨

今度はしっかり i-- をループの中に入れられていて、無限ループにならず、正しく 10から1まで逆順に出力 されます。

🖥 実行結果
10
9
8
7
6
5
4
3
2
1

✅ フィードバック
int i = 10; で初期化できている 👍
while (i >= 1) で正しい条件指定ができている 👍
i-- を忘れずにループ内に書けている 👍
完全に正解です！👏

次に進みましょう。





📝 問題3
while 文を使って、1から100までの合計値 を求めて表示してください。

基本の書き方（例文コード：whileで累積）
public class Main {
  public static void main(String[] args) {
    int i = 1;      // カウンタ（初期化）
    int total = 0;  // 合計（累積用の変数）

    while (i <= 100) {  // 条件：iが100以下の間
      total += i;       // 累積（total = total + i）
      i++;              // 更新（忘れると無限ループ）
    }

    System.out.println(total); // 最後に合計だけ出力
  }
}


（出力例）
5050

👉 ぜひコードを書いてみてください。

public class Main{
  public static void main(String[] args){
    int i=1;
    int x=0;

    while(i <= 100){
      x += i;
      i++;
    }
    System.out.println(x);
  }
}

完璧です！👏
あなたのコードはしっかり動き、1から100までの合計を正しく計算して表示できます。

🖥 実行結果
5050

✅ フィードバック
int i = 1; でカウンタ初期化 → OK
while (i <= 100) の条件式 → 正しく100までカバーできている
x += i; で累積 → 正解
i++ をループ内で更新している → 無限ループ防止できている
最後に System.out.println(x); で合計を一度だけ出力 → 正しい

とてもきれいに書けています。この問題は 合格 です！✨
それでは次に進めましょう。





📝 問題4
while 文を使って、1から100までの偶数の合計を求めて表示してください。

（出力例）

2550

👉 ぜひコードを書いてみてください。


public class Main{
  public static void main(String[] args){
    int i=1;
    int total =0;

    while(i <= 100){
      if (i %2 ==0){
        total += i;
      }
      i++;
    }
    System.out.println(total);
  }
}

おお！いい感じです👏 ただし、今のコードは 無限ループ になってしまいます。

❌ 問題点
while(i <= 100){
  if (i % 2 == 0){
    total += i;
    i++;  // ← 偶数のときしか増えない
  }
}

i が奇数のとき、i++ が実行されない → i がそのまま → 永遠にループ。



素晴らしいです！👏
修正版でしっかり 無限ループを避ける形 に直せています。

🖥 実行結果
2550

✅ フィードバック
i++ を if の外に置いたので、必ずカウンタが進み、無限ループにならない 👍
偶数判定 if (i % 2 == 0) も正しく書けています 👍
total += i; で累積も正解 👍
System.out.println(total); で最後に合計を表示できています 👍
完璧に正解です！🎉


✅ 修正版（解決方法2：最初から偶数だけ回す）
public class Main {
  public static void main(String[] args) {
    int i = 2;       // 偶数スタート
    int total = 0;

    while (i <= 100) {
      total += i;
      i += 2;        // 偶数だけ進む
    }
    System.out.println(total);
  }
}


おっしゃる通り、学習方法に則り、初めての内容は必ず例題から提示するべきでした。
九九（ネストされたループ）は 「ネストされたループ」＝「ループの中にループがある」 という新しい学習項目ですから、まずは例文コードから確認しましょう。

📘 例題：九九を while 文で表示するコード

public class Main {
  public static void main(String[] args) {
    int i = 1; // 外側のカウンタ（掛ける数）

    while (i <= 9) { // 1から9まで繰り返す
      int j = 1; // 内側のカウンタ（掛けられる数）

      while (j <= 9) { // 1から9まで繰り返す
        System.out.println(i + " × " + j + " = " + (i * j));
        j++; // jを更新
      }

      i++; // iを更新
    }
  }
}

🔍 コードの解説

外側の while (i <= 9)
→ 1の段、2の段、3の段 … 9の段を順番に回す

内側の while (j <= 9)
→ 各段ごとに「1〜9」を掛ける

System.out.println(...)
→ i × j = (i * j) を文字列として表示



🖥 出力結果（例）
1 × 1 = 1
1 × 2 = 2
...
1 × 9 = 9
2 × 1 = 2
2 × 2 = 4
...
9 × 9 = 81

👉 ここまでが「例題（基本の書き方）」です




次の練習に進みましょう。
次のステップとして練習問題を出します。

📝 練習問題

九九の出力をするときに、「段ごとに改行」 を入れて表示してみてください。

出力例（見やすい形）：

1 × 1 = 1
1 × 2 = 2
...
1 × 9 = 9

2 × 1 = 2
2 × 2 = 4
...
2 × 9 = 18

...


🧩 実行の流れ

最初に外側ループがスタート
i = 1 → 条件 i <= 9 は true → 外側ループに入る
内側ループが走る
内側の最初で j = 1 に初期化される
j <= 9 が true なので 1 × 1 が出力
j++ → j = 2
もう一度内側の while に戻り、1 × 2 を出力
これを繰り返して 1 × 9 まで進む
j = 10 になった時、条件 j <= 9 が false → 内側ループ終了
内側ループを抜けたら外側に戻る
i++ により i = 2 になる
再び外側の while (i <= 9) をチェック → true なので次の段へ
もう一度内側ループが開始
ここがポイント！ 内側ループに入るときに
int j = 1;
が毎回実行される
つまり、外側のループが1回進むたびに、内側の j がリセットされる
次の段が始まる
i = 2 のとき 2 × 1 から 2 × 9 まで表示
終わったら再び外側へ → i++ で i = 3
j がまた1からスタートして 3 × 1 から…
これを i = 9 まで繰り返す。
i = 10 になったら外側ループも終了。

✨ 結論
外側のカウンタ i は段（1の段、2の段…）を進める役割。
内側のカウンタ j は毎回「1からスタート」し直す。（リセット不要 → すでにコードで毎回 int j = 1; と書かれているから）
だから自然に「1×1〜1×9」「2×1〜2×9」…「9×1〜9×9」と繰り返せる。

💡 イメージ図
外側ループ i=1
   内側ループ j=1→9   → 1×1,1×2,1×3,…1×9
外側ループ i=2
   内側ループ j=1→9   → 2×1,2×2,2×3,…2×9
外側ループ i=3
   内側ループ j=1→9   → 3×1,3×2,…3×9
...


👉 つまり、あなたの理解どおりです！
外側が進むたびに「内側のカウンタ j がリセットされる」。
その仕組みは 内側の while の前に毎回 int j = 1; 
を書いているから です。


🔎 今回の「while文」パートの学習内容（整理）
while文の基本的な使い方（✅）
偶数表示、逆順表示（✅）
1〜100までの合計（✅）
1〜100までの偶数の合計（✅）

ここまでで while文の基本と応用 はしっかり身についています。