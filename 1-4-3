今回は 「繰り返し処理」 → do-while文 を学びましょう。

🔹 基本の書き方（例文コード）

public class Main {
    public static void main(String[] args) {
        int i = 1; // 初期値を1に設定

        do {
            System.out.println("iの値は: " + i);
            i++; // カウンタを1増やす
        } while (i <= 5); // 条件を満たす間、繰り返す
    }
}

✅ ポイント
do-while文の特徴
処理を実行 → 条件判定 → 条件がtrueなら繰り返し、falseなら終了。
上の例では、i が 1〜5 まで出力されます。
「必ず1回は実行される」という点が、while文との大きな違いです。

do-while文は「先に処理を実行してから条件を判定する」ため、条件が最初からfalseでも1回は必ず実行されるという特徴があります。

例：

int x = 10;

do {
    System.out.println("実行されました");
} while (x < 5); // false


👉 この場合、条件は最初からfalseですが、1回だけは出力されます。
これが while文 との違いです。

あなた:
出力というのはfalseがという事ですか？それとも実行されましたがですか？

ChatGPT:
良い質問です 👍
ここで 出力されるのは「実行されました」 です。
do の中の処理は 必ず1回実行 されるので、System.out.println("実行されました"); が出力されます。
その後に while (x < 5) が評価されて false になるので、繰り返しは終了します。

つまり：
出力 → "実行されました"
条件 → false（だから2回目以降は実行されない）
という流れです。




🔹 練習問題1
次の仕様を満たすプログラムを書いてください。
仕様
変数 count を 10 から始める。
count の値を毎回出力する。
その後、count を 1 減らす。
count が 0以上の間、繰り返す。

✍️ まずはこの問題に取り組んでください。
コードを書いていただければ、私が正誤をチェックしてフィードバックします。

public class Main{
  public static void main(String[] args){
    int i =10;

    do {
      System.out.println(i);
      i--;
    }while(i >= 0);
  }
}

完璧です！💯👏
あなたのコードは、練習問題の仕様どおりに動きます。

✅ 実行の流れ
i を 10 で初期化
do の中でまず 10を出力
i-- で i を減らす
while(i >= 0) がtrueなら繰り返し

✅ 出力結果
10
9
8
7
6
5
4
3
2
1
0

📌 フィードバック

do-while文の特徴「必ず1回実行される」も、ここで確認できます。
仮に最初に int i = -1; としても、-1 が一度だけ出力されて終了します。





🔹 練習問題2
仕様
変数 num を 1 にする。
num を2倍して出力する。
num が100以下の間、繰り返す。
今回の課題は 「1ずつ増やす」ではなく、「前の数を2倍していく」 という流れです。

✍️ do-while文を使ってコードを書いてみてください。
書いていただいたら、私がチェック＆フィードバックします！


public class Main{
  public static void main (String[] args){
    int num =1;

    do{
      System.out.println(num );
      num = num* 2;
    } while(num <= 100);
  }
}

❌ 修正ポイント

i++ という変数は存在しないのでエラーになります。
　→ ここでは num を更新する必要があります。

num * 2 を出力すると「2, 2, 2…」のように常に2倍値しか出ません。
　→ num 自体を2倍して更新する必要があります。



あなたが書いた形（修正想定）
System.out.println(num * 2);
num++;

この場合の流れ

最初 num = 1
出力は 1 * 2 = 2
→ num は 2 に更新

次のループでは
出力は 2 * 2 = 4
→ num は 3 に更新

その次は
出力は 3 * 2 = 6
→ num は 4 に更新

ずっとこの調子で進む
どうなるか？
出力は

2
4
6
8
10
...
200


のように「偶数がズラッと並ぶ」プログラムになります。
これは 「numを＋1ずつ増やしながら、その2倍を出力する」 プログラムです。

問題の仕様を再確認
問題では「num を2倍して出力する」「100以下の間、繰り返す」としました。
これはつまり：
1 → 2 → 4 → 8 → 16 → … → 64
のように 前の数を2倍していく流れ を作りたいのです。
👉 だから、必要なのは「num++ で1ずつ増やす」のではなくて、num = num * 2 で2倍に更新することなんです。

まとめ
num++ → 値を 1ずつ増やす（2,4,6,8,…になる）
num = num * 2 → 値を 2倍にしていく（1,2,4,8,16,…になる）

📌 つまり、あなたの理解も正しいです！
num++ を使うと「偶数列を出力するプログラム」になります。
ただし今回の課題の仕様が「倍々にする」だったので、num = num * 2 を使う必要がある、という違いなんです。



numを複数使ってもいいのでしょうか？つまり、同じに意味であると認識しないのでしょうか？


ChatGPT:
なるほど！とても良い視点です 👏

結論から言うと：
同じスコープ（{} の中）で、同じ変数名 num を2回以上宣言することはできません。
→ コンパイルエラーになります。
ただし、別の変数名を使うことは自由です。
例：num1, num2 など。
これは別の箱として扱われるので、互いに干渉しません。
また、スコープが違えば同じ名前でもOKです。
例えばメソッドの外と中で num を宣言すると、それぞれ独立した変数として扱われます。

例：同じスコープで同じ名前はNG ❌
public class Main {
  public static void main(String[] args) {
    int num = 1;
    int num = 2;  // エラー！同じスコープで再宣言はできない
  }
}

例：別名ならOK ✅
public class Main {
  public static void main(String[] args) {
    int num1 = 1;
    int num2 = 2;
    System.out.println(num1 + num2); // 3
  }
}

例：スコープが違えば同じ名前でもOK ✅
public class Main {
  public static void main(String[] args) {
    int num = 10; // mainメソッドのnum

    do {
      int num = 5; // エラーになりそうですが、実はNG（同じスコープ内）
    } while (false);
  }

  public static void otherMethod() {
    int num = 20; // 別のメソッドなのでOK
  }
}


👉 ただし注意点として、同じメソッドの中で do-while の{}に入れてもスコープはかぶるので再宣言できません。

まとめ
同じスコープで同じ変数名は使えない
名前を変えれば複数使える
別のメソッドやクラスなら同じ名前でもOK


public class Main {
  public static void main(String[] args) {
    int num = 10; // mainメソッドの中のnum

    if (true) {
      int num = 20; // ❌ 実はこれも同じmainメソッド内なのでエラー
    }
  }

  public static void otherMethod() {
    int num = 30; // OK！別のメソッドだから
  }
}



✅ 補足：スコープの考え方
メソッド単位、クラス単位で区切られます。
変数の「生存範囲」が重なっていなければ同じ名前を使えます。

つまり：
同じメソッド内で同じ変数名は1回だけしか使えない
別のメソッドやクラスなら同じ変数名でもOK


🔹 確認テスト（最終問題）
学習の仕上げとして、簡単な確認問題を1つだけ出します。

仕様
変数 x を 5 にする。
x を出力する。
毎回 x を1ずつ減らす。
x が 1以上の間 繰り返す。

👉 実行結果は

5
4
3
2
1


となるはずです。

✍️ この確認問題をやってみてください。
できたら、私が正誤チェックをして「do-while文の学習完了」にしましょう！

public class Main {
  public static void main (String[]args) {
    int x =5;

    do {
      System.out.println(x);
      x--;
    }while(x >=1);
  }
}

✅ 完璧です！💯👏
あなたのコードは仕様どおりに動作します。

🔹 実行の流れ
x = 5 からスタート
doブロック内で 5 を出力 → x-- で 4 へ
while(x >= 1) がtrueなので繰り返す
4 → 3 → 2 → 1 と順番に出力
x = 0 で条件がfalseになり、終了

🔹 出力結果
5
4
3
2
1

📌 フィードバック

do-while文の基本的な「必ず1回実行される」「条件判定で終了する」という動きが正しく使えています。
カウンタ（x--）の更新も正しい。
コードの書き方もシンプルで読みやすいです。
これで do-while文の学習は完了 です！🎉